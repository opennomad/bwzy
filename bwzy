#!/bin/bash

# TODO: hide window on copy

# Trap EXIT signal to clean up by default
cleanup() {
    echo "Cleaning up temporary directories..."
    rm -rf "$TMP_DIR"
}
[[ "$BWZY_KEEP_CACHE" != 'true' ]] && trap cleanup EXIT
  
# defaults
BWZY_DEFAULT_OPTS=(--layout reverse --height 100%)
BWZY_ONESHOT_OPTS=(--layout default --height 10 --no-header)
BWZY_ONESHOT_EXIT="+accept"
BWZY_POINTER_SYMBOL=${BWZY_POINTER_SYMBOL:-> }
BWZY_MARKER_SYMBOL=${BWZY_MARKER_SYMBOL:-! }
BWZY_PROMPT_SYMBOL=${BWZY_PROMPT_SYMBOL:-? }
BWZY_USER_SYMBOL=${BWZY_USER_SYMBOL:-u+}
BWZY_PASS_SYMBOL=${BWZY_PASS_SYMBOL:-p+}
BWZY_TOTP_SYMBOL=${BWZY_TOTP_SYMBOL:-t+}
BWZY_LINK_SYMBOL=${BWZY_LINK_SYMBOL:-l+}
BWZY_AUTO_SYMBOL=${BWZY_AUTO_SYMBOL:-a+}

export BWZY_COPY_CMD=${BWZY_COPY_CMD:-wl-copy}
export BWZY_TYPE_CMD=${BWZY_TYPE_CMD:-wtype}

read -r -d '' HELP_TEXT<<'EOH'
bwzy is a fuzzy wrapper to the bitwarden cli

Usage:
  `bwzy` will run the fuzzy selection
  `bwzy -s` syncs the vault
  `bwzy -f` flushes the cache
  `bwzy -d` enables debug logging
  `bwzy -h` shows this help
EOH

# read in the options
FLUSH_CACHE=false
SYNC_CACHE=false
DEBUG=false
BWZY_OPTS=("${BWZY_DEFAULT_OPTS[@]}")
BWZY_EXIT=""
while getopts "dfhs1" o; do
  case "${o}" in
    1)
      BWZY_OPTS=( "${BWZY_ONESHOT_OPTS[@]}" )
      BWZY_EXIT=${BWZY_ONESHOT_EXIT}
      ;;
    h)
      # show help and exit
      echo "$HELP_TEXT" | gum format
      exit 0
      ;;
    d)
      DEBUG=true
      ;;
    f)
      FLUSH_CACHE=true
      ;;
    s)
      SYNC_CACHE=true
      ;;
    *)
      usage
      ;;
  esac
done
shift $((OPTIND-1))

# begin of main code
function log() {
  [[ $DEBUG == 'true' ]] && gum log "$@"
}
log "bwzy options: flush:${FLUSH_CACHE} sync:${SYNC_CACHE}"

# Create temporary directories in tmpfs
# Static filename is used to allow for re-use between invocations
umask 077 # only user shall have permissions
TMP_DIR="/dev/shm/bwz-cache"
[[ "$FLUSH_CACHE" == 'true' ]] \
  && rm -rf "$TMP_DIR" \
  && echo "cache flushed" && exit 0
[[ ! -d $TMP_DIR ]] && mkdir "$TMP_DIR"
[[ ! -d $TMP_DIR ]] && echo "failed to create tmp dir" && exit 1

# use the session token if it exists
if [[ -f ${TMP_DIR}/session ]]; then
  BW_SESSION=$(<${TMP_DIR}/session)
  export BW_SESSION
fi

if [[ ! -f "${TMP_DIR}/items" ]] || [[ ! -s "${TMP_DIR}/items" ]] \
  || [[ ! -f "${TMP_DIR}/folders" ]] || [[ ! -s "${TMP_DIR}/folders" ]] \
  || [[ $SYNC_CACHE == 'true' ]]; then

  # test the session token and get a new one if it's not unlocked
  if [[ -z "$BW_SESSION" ]] || [[ $(bw status | jq -r '.status') != 'unlocked' ]]; then
    BW_PASS=$(gum input --password)
    BW_SESSION=$(bw unlock "$BW_PASS" --raw)
    [[ -z $BW_SESSION ]] && echo "failed to get session token" && exit 1
    export BW_SESSION
  fi

  echo "$BW_SESSION" > "${TMP_DIR}/session"
  gum spin --title 'fetching items ...' -s dot bw list items > "${TMP_DIR}/items"
  gum spin --title 'fetching folder list ...' -s dot bw list folders > "${TMP_DIR}/folders"
fi

log "bwzy Environment:"
[[ $DEBUG == 'true' ]] && set | grep ^BWZY | bat -l sh | while read -r line; do
  log -- "- $line"
done

items="${TMP_DIR}/items"
folders="${TMP_DIR}/folders"

TAB="	"
folder_sed=$(jq -r '.[] | [ "s@" , .id , "@" , .name , "@;" ] | join("")' < "$folders")

# define the logic here for use in fzf call
jq_select_id="jq -r '.[] | select(.id == \"{1}\")"
# set up queries for the fields
select_user="$jq_select_id | .login.username' <$items"
select_pass="$jq_select_id | .login.password' <$items"
select_totp="$jq_select_id | .login.totp' <$items | sed 's/.*secret=//; s/&.*//' | oathtool -b --totp -"
select_link="$jq_select_id | .login.uris[1].uri' <$items"

copy_user="$select_user | $BWZY_COPY_CMD"
copy_pass="$select_pass | $BWZY_COPY_CMD"
copy_totp="$select_totp | $BWZY_COPY_CMD"
copy_link="$select_link | $BWZY_COPY_CMD"
bwzy_autofill="$(dirname "$0")/bwzy-autofill"
auto_paste="($select_user; $select_pass; $select_totp) | $bwzy_autofill"

preview_item="$jq_select_id' < $items | json2yaml | bat --color=always -p -l yaml"

read -r -d '' fzf_header <<'FZF_HEADER'
[󰘴-l] copy link     [󰘴-/] toggle preview   [󰘴-w] toggle preview wrap
[󰘴-u] copy username [󰘴-p] copy password    [󰘴-t] copy totp
[󰘴-q] quit          [enter] auto-fill
FZF_HEADER

# shellcheck disable=SC2016
# **the single and double quotes in the fzf commands are intentional**
jq -r '.[] | [ .id, .name, .folderId ] | join("'"$TAB"'")' <"$items" \
  | sed -e "$folder_sed" \
  | awk -F "$TAB" '{ printf "%s\t%-35s\t%27s\n", $1, $2, $3 }' \
  | awk -F '	' '{ print $1"\t{{ Color \"3\" \"0\" \""$2"\" }}\t{{Color \"8\" \"0\" \"" $3 "\" }}" }' \
  | gum format -t template \
  | fzf --ansi -i --delimiter="$TAB" --with-nth 2,3 \
  --header-first \
  --marker='' --pointer="$BWZY_POINTER_SYMBOL" \
  --prompt="$BWZY_PROMPT_SYMBOL" \
  --info 'inline-right:' \
  --info-command 'echo "($FZF_MATCH_COUNT/$FZF_TOTAL_COUNT)"' \
  --bind "ctrl-u:execute-silent($copy_user)+change-prompt($BWZY_USER_SYMBOL)${BWZY_EXIT}" \
  --bind "ctrl-p:execute-silent($copy_pass)+change-prompt($BWZY_PASS_SYMBOL)${BWZY_EXIT}" \
  --bind "ctrl-t:execute-silent($copy_totp)+change-prompt($BWZY_TOTP_SYMBOL)${BWZY_EXIT}" \
  --bind "ctrl-l:execute-silent($copy_link)+change-prompt($BWZY_LINK_SYMBOL)${BWZY_EXIT}" \
  --bind "enter:execute-silent($auto_paste)+change-prompt($BWZY_AUTO_SYMBOL)${BWZY_EXIT}" \
  --bind 'ctrl-/:toggle-preview' \
  --bind 'ctrl-w:toggle-preview-wrap' \
  --bind 'ctrl-h:toggle-header' \
  --bind 'ctrl-q:abort' \
  --bind 'focus:transform-preview-label:echo {2} / {3}' \
  --bind "focus:change-prompt($BWZY_PROMPT_SYMBOL)" \
  --preview-window 'down:75%:hidden' \
  --preview "$preview_item" \
  --header "${fzf_header}" \
  "${BWZY_OPTS[@]}"

